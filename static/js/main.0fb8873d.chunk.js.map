{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Form","props","value","inputText","type","className","onChange","e","setInputText","target","spellCheck","onClick","preventDefault","todo","completed","id","Math","random","setTodos","todos","setStatus","name","Todo","text","map","item","filter","el","TodoList","filteredTodos","key","App","useState","status","setFilteredTodos","useEffect","localStorage","getItem","JSON","parse","filterHandler","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0fb8873d.chunk.js","sourcesContent":["import React from 'react';\nimport { FaPlusSquare } from 'react-icons/fa';\n\nconst Form = (props) => {\n    const inputTextHandler = (e) => {\n        props.setInputText(e.target.value);\n    };\n\n    const submitTodoHandler = (e) => {\n        e.preventDefault();\n\n        if(props.inputText === \"\") return;\n\n        const todo = {\n            inputText: props.inputText,\n            completed: false,\n            id: Math.random() * 1000,\n        };\n\n        props.setTodos([...props.todos, todo]);\n        props.setInputText(\"\"); // resetting input field\n    };\n\n    const statusHandler = (e) => {\n        props.setStatus(e.target.value);\n    };\n\n    return (\n        <form>\n            <input\n                value={props.inputText}\n                type=\"text\"\n                className=\"todo-input\"\n                onChange={inputTextHandler}\n                spellCheck=\"false\"\n            />\n            <button className=\"todo-button\" type=\"submit\" onClick={submitTodoHandler}>\n                <FaPlusSquare />\n            </button>\n            <div className=\"select\">\n                <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\n                    <option value=\"all\">All</option>\n                    <option value=\"completed\">Completed</option>\n                    <option value=\"uncompleted\">Uncompleted</option>\n                </select>\n            </div>\n        </form>\n    );\n};\n\nexport default Form;\n","import React from 'react';\nimport { FaCheck, FaTrash } from 'react-icons/fa';\n\nconst Todo = (props) => {\n    const deleteHandler = () => {\n        props.setTodos(props.todos.filter((el) => el.id !== props.todo.id));\n    };\n\n    const completeHandler = () => {\n        props.setTodos(\n            props.todos.map((item) => {\n                if (item.id === props.todo.id) {\n                    return {\n                        ...item,\n                        completed: !item.completed,\n                    };\n                }\n                return item;\n            })\n        );\n    };\n\n    return (\n        <div className=\"todo\">\n            <li className={`todo-item ${props.todo.completed ? 'completed' : ''}`}>{props.text}</li>\n            <button className=\"complete-btn\" onClick={completeHandler}>\n                <FaCheck />\n            </button>\n            <button className=\"trash-btn\" onClick={deleteHandler}>\n                <FaTrash />\n            </button>\n        </div>\n    );\n};\n\nexport default Todo;\n","import React from 'react';\nimport Todo from './Todo';\n\nconst TodoList = (props) => {\n    return (\n        <div className=\"todo-container\">\n            <ul className=\"todo-list\">\n                {props.filteredTodos.map((todo) => (\n                    <Todo\n                        text={todo.inputText}\n                        key={todo.id}\n                        setTodos={props.setTodos}\n                        todos={props.todos}\n                        todo={todo}\n                    />\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default TodoList;\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\n\nimport Form from '../Form';\nimport TodoList from '../TodoList';\n\nfunction App() {\n    const [inputText, setInputText] = useState('');\n    const [status, setStatus] = useState('all');\n    const [todos, setTodos] = useState([]);\n    const [filteredTodos, setFilteredTodos] = useState([]);\n\n    const filterHandler = () => {\n        switch (status) {\n            case 'completed':\n                setFilteredTodos(todos.filter((todo) => todo.completed === true));\n                break;\n            case 'uncompleted':\n                setFilteredTodos(todos.filter((todo) => todo.completed === false));\n                break;\n            default:\n                setFilteredTodos(todos);\n                break;\n        }\n    };\n\n    const saveToLocalStorage = () => {\n        localStorage.setItem('todos', JSON.stringify(todos));\n    };\n\n    const getLocalStorage = () => {\n        if (localStorage.getItem('todos') !== null) {\n            setTodos(JSON.parse(localStorage.getItem('todos')))\n        }\n    };\n\n    useEffect(getLocalStorage, []);\n\n    useEffect(() => {\n        filterHandler();\n        saveToLocalStorage();\n        // eslint-disable-next-line\n    }, [todos, status]);\n\n    return (\n        <div className=\"App\">\n            <header>\n                <h1>what're you upto today?</h1>\n            </header>\n            <Form\n                todos={todos}\n                setTodos={setTodos}\n                inputText={inputText}\n                setInputText={setInputText}\n                setStatus={setStatus}\n            />\n            <TodoList setTodos={setTodos} todos={todos} filteredTodos={filteredTodos} />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.scss';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}