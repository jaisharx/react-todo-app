{"version":3,"sources":["components/Form/Form.module.scss","components/Todo/Todo.module.scss","components/App.module.scss","components/TodoList/TodoList.module.scss","components/Form/Form.js","components/Todo/Todo.js","components/TodoList/TodoList.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","props","className","styles","header","form","formGroup","value","inputText","type","todoInput","onChange","e","setInputText","target","spellCheck","todoButton","onClick","preventDefault","todo","completed","id","Math","random","setTodos","todos","select","setStatus","name","filterTodoList","Todo","text","completeBtn","map","item","trashBtn","filter","el","TodoList","todoContainer","todoList","filteredTodos","key","App","useState","status","setFilteredTodos","useEffect","localStorage","getItem","JSON","parse","filterHandler","setItem","stringify","container","href","rel","contact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d0f290a1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Form_header__2Q69M\",\"form\":\"Form_form__3wvE7\",\"todoInput\":\"Form_todoInput__1pzEp\",\"todoButton\":\"Form_todoButton__1_PZF\",\"formGroup\":\"Form_formGroup__29fHf\",\"select\":\"Form_select__9-8jd\",\"filterTodoList\":\"Form_filterTodoList__2hfGa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todo\":\"Todo_todo__1mlW6\",\"completed\":\"Todo_completed__32REo\",\"trashBtn\":\"Todo_trashBtn__DueEW\",\"completeBtn\":\"Todo_completeBtn__3QNeu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1qkKC\",\"contact\":\"App_contact__3Suzv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoContainer\":\"TodoList_todoContainer__1VrMG\",\"todoList\":\"TodoList_todoList__wJSF2\"};","import React from 'react';\n\nimport styles from './Form.module.scss';\nimport { FaPlusSquare } from 'react-icons/fa';\n\nconst Form = (props) => {\n    const inputTextHandler = (e) => {\n        props.setInputText(e.target.value);\n    };\n\n    const submitTodoHandler = (e) => {\n        e.preventDefault();\n\n        if (props.inputText === '') return;\n\n        const todo = {\n            inputText: props.inputText,\n            completed: false,\n            id: Math.random() * 1000,\n        };\n\n        props.setTodos([...props.todos, todo]);\n        props.setInputText(''); // resetting input field\n    };\n\n    const statusHandler = (e) => {\n        props.setStatus(e.target.value);\n    };\n\n    return (\n        <div>\n            <header className={styles.header}>\n                <h1>what're you upto today?</h1>\n            </header>\n            <form className={styles.form}>\n                <div className={styles.formGroup}>\n                    <input\n                        value={props.inputText}\n                        type=\"text\"\n                        className={styles.todoInput}\n                        onChange={inputTextHandler}\n                        spellCheck=\"false\"\n                    />\n                    <button className={styles.todoButton} type=\"submit\" onClick={submitTodoHandler}>\n                        <FaPlusSquare />\n                    </button>\n                </div>\n                <div className={styles.select}>\n                    <select onChange={statusHandler} name=\"todos\" className={styles.filterTodoList}>\n                        <option value=\"all\">All</option>\n                        <option value=\"completed\">Completed</option>\n                        <option value=\"uncompleted\">Uncompleted</option>\n                    </select>\n                </div>\n            </form>\n        </div>\n    );\n};\n\nexport default Form;\n","import React from 'react';\n\nimport styles from \"./Todo.module.scss\";\nimport { FaCheck, FaTrash } from 'react-icons/fa';\n\nconst Todo = (props) => {\n    \n    const deleteHandler = () => {\n        props.setTodos(props.todos.filter((el) => el.id !== props.todo.id));\n    };\n\n    const completeHandler = () => {\n        props.setTodos(\n            props.todos.map((item) => {\n                if (item.id === props.todo.id) {\n                    return {\n                        ...item,\n                        completed: !item.completed,\n                    };\n                }\n                return item;\n            })\n        );\n    };\n\n    return (\n        <div className={styles.todo}>\n            <li className={`${props.todo.completed ? styles.completed : ''}`}>{props.text}</li>\n            <button className={styles.completeBtn} onClick={completeHandler}>\n                <FaCheck />\n            </button>\n            <button className={styles.trashBtn} onClick={deleteHandler}>\n                <FaTrash />\n            </button>\n        </div>\n    );\n};\n\nexport default Todo;\n","import React from 'react';\n\nimport Todo from '../Todo/Todo';\nimport styles from \"./TodoList.module.scss\";\n\nconst TodoList = (props) => {\n    return (\n        <div className={styles.todoContainer}>\n            <ul className={styles.todoList}>\n                {props.filteredTodos.map((todo) => (\n                    <Todo\n                        text={todo.inputText}\n                        key={todo.id}\n                        setTodos={props.setTodos}\n                        todos={props.todos}\n                        todo={todo}\n                    />\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default TodoList;\n","import React, { useState, useEffect } from 'react';\nimport styles from './App.module.scss';\n\nimport Form from './Form/Form';\nimport TodoList from './TodoList/TodoList';\n\nimport { AiFillTwitterCircle } from 'react-icons/ai';\n\nfunction App() {\n    const [inputText, setInputText] = useState('');\n    const [status, setStatus] = useState('all');\n    const [todos, setTodos] = useState([]);\n    const [filteredTodos, setFilteredTodos] = useState([]);\n\n    const filterHandler = () => {\n        switch (status) {\n            case 'completed':\n                setFilteredTodos(todos.filter((todo) => todo.completed === true));\n                break;\n            case 'uncompleted':\n                setFilteredTodos(todos.filter((todo) => todo.completed === false));\n                break;\n            default:\n                setFilteredTodos(todos);\n                break;\n        }\n    };\n\n    const saveToLocalStorage = () => {\n        localStorage.setItem('todos', JSON.stringify(todos));\n    };\n\n    const getLocalStorage = () => {\n        if (localStorage.getItem('todos') !== null) {\n            setTodos(JSON.parse(localStorage.getItem('todos')));\n        }\n    };\n\n    useEffect(getLocalStorage, []);\n\n    useEffect(() => {\n        filterHandler();\n        saveToLocalStorage();\n        // eslint-disable-next-line\n    }, [todos, status]);\n\n    return (\n        <div className={styles.container}>\n            <Form\n                todos={todos}\n                setTodos={setTodos}\n                inputText={inputText}\n                setInputText={setInputText}\n                setStatus={setStatus}\n            />\n            <TodoList setTodos={setTodos} todos={todos} filteredTodos={filteredTodos} />\n            \n            {/* twitter contact link */}\n            <a\n                href=\"https://twitter.com/jaisharx\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className={styles.contact}\n            >\n                <AiFillTwitterCircle />\n            </a>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}